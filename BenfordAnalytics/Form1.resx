<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAQEAAAAEACAAoFgAAFgAAACgAAABAAAAAgAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAQAABwQAAAIGAwAFCQcACg0LABoNCQAMEA4ADhEPACESCgASFBMAKhcJABYYFwAaHBsAHB8dACMm
        JAAmKCcAVy8OAEYtGwArLDAALC4tAFI0HAAwMzEANDY1ADc5OABxPRoAeUAPAEA9PwA9QD4AiEgNAFtF
        OQBDRkQARklHAExPTQCbUyUATU5TALFeFQBUVlUAVFVZAFlXUgBeXFgAWVxaAF5bXQBZW18AY19iAF5f
        ZABjYVwAXmFfAF9iYADDaCsAYGNhAGNlZABoZGYAY2RpAGhmYQBkZmUA2nMYANV1GgBnamgAx3MqAG1r
        ZgBoa2kAbmpsAGlqbwDYdx8A1HMuAGptawDQdS8AyHM7ANd1MgBsb20ApXNOAG1wbgBzcGwAzXgzAG1v
        cwBzb3EA1Hg1ALp3RQC7eEYAo3ZXAMl5QQC1d08At3pGANl/LQBydXMAeHVxAHh0dgDYfDsA0n06AHJ0
        eQBzdnQAxn1DAHV4dgDWgD8Ad3h9AM9/SAB3engAk3xpAH15ewB4e3kAsn9bAL5/VwDThEEAuoFXAIV+
        dgB8f30AfX6DAIOAewB9gH4Aq4RjAJ+DbADKhlcA0ohRAK2EbADBiF4Au4dkAIGEggCCg4gAgoWDAIiF
        gQCIhIYA2I1XAIWIhgCXin4AjIiLAIeIjQCNioUAh4qIAIiLiQDQkWAAj4yHAMmQZwCnj3wAko+KAIyN
        kwCMj40AtJJ2AJKOkADBlG0AlJGNAKCThwCQk5EAlpOPAL6VfACRlJIAl5OVAJGTmACTlpQA3JxtANac
        cwChmZEAlZecAJuZlADKnXcAlpmXAJyYmgCwnY4AvJ6HANWhdQDIoH8AoJyeAJucoQCgnpkAm5+dANij
        gADHo4gAzKSDAKChpgCmoaQApaOeAKGkogCppqEAr6efAM+rjwCrp6kAvaqbAKappwC5rKAAxq2aAKqt
        qwCwrqgAq66sAKutsgCsr60Asq6wAMuznwC1sLMAsLG2ALWzrgCvs7EA2raaALG0sgCytbMAs7S5ALO2
        tADAuLAAu7a5ALu4swC1trwAtbi2ALe6uAC/vLcAuby6ALq9uwDAvL4AurzBAL3BvgDEwMMAv8DFAMTC
        vQC+wsAA0cO4AL/DwQDZxrYA4ci1AMrFyADKx8IAxMXLAMTHxQDFyMYA18m9AMbJxwDIys8Az8zHAMnM
        ygDPy80A0c/KANTP0gDP0tAA09bUANnX0QDa1tgA1trYAN/a3QDf3NcA2drgANnc2gDj4NsA3uHfAN7g
        5QDm5N8A6eTnAOnm4QDj5OoA4+flAO3q5QDo6+kA7ursAOjq7wDz7vEA7e70AO3x7gDx8/gA8vXzAPj7
        +QAAAAAAJiUpJiQkJiQkJCQlJiQmJCQkJiYmJCYkJCYmJCQlJikmJCYkJCYlJiYkJCQmJiUmJiYmJiUm
        JCQmJiUmJSUlKSgnKCkpJyonKScnKSkpJycnKSooJycqJykpKiknKCknKCcqJykqKionJycpKicoKioo
        KignKikpKCgpKicoKCgoLSwtMS8xLywuLCwxLjEsLCwuLSwsLC8sLi8tLywrMSwsLC0sLy0vLSwxLC8v
        NDUtLSsvKzEtLi8sKzEtMS0rKSwyNDU2NDM2OTY1NTszMzYzMzY2NTUzNjMyNDYzNTQ1MzM0NTU1MzU2
        NDY1MzU0PjU1MzIrNDM0MzE1NDQ0NicxNj08Pj47PD09PT4+Pjw5PTs8Pj0+Pjw9Oz45PTw+PTw8OTs+
        Pj48Pj09PT48Pj07Pj45PTk7OT1BPT47PTMpLTM8S0dLS0tHR0dIR0dHR0dKS0tHR0tLQUpLS0FLS0dL
        SEtKR0hLS0tHR0dHS0dHR0hIRUVLSkpBSEhLSjwyKi42PEtaVVpaWlZWVllVVlZWVlZaWlZVWkdQQEBA
        T1pUVlpaXFxVWlxaXFZWVlZaVVZWWVRGN0BAOllZWUc5MyksND1HVmJiYmJcWlxcXlxjYFlcYmJjXmJi
        Tzc3N0NjYlxiXmJiYl5iYmJjXFxcXl5jYGJeQ0A3N09rVWJLPTYoLzU9SlZcaWxsaXhqeHhseGJ4a3hs
        bGJ4aWtAQEBEYWppeGxrbGxsa2xpbGJ4anhrbGJ4YUA3N0JoaV5ZRzs1Jy05PEdaYmp1eHV2d3Z2d3Z2
        dnZ2dXV0dnh3TTc3N1J3eHZ4dnh1dXZ1dXh6dnd1dnd2dEY3QDdNdXhgWkg+NicsNDtLVmJ4d35/fXx8
        fnx8fH1+fH5+fn1+f243QEQwfH1/fXp8gH58fH5+f3x9gH98fXdANzc3bnh4Y1ZLPjIqLTI+R1RcaXZ/
        iYWHh4aHgIeFhoeGhomFhoeGQzc3N22JhYWJh4mHh4eHhouHi4aFh4dxQEBAQnp1bGJUSzszKS00PUhW
        Ynh4fIaQkZGRjo6RjpCRkZGRjZKNi2c3QEBbko2SkpGRjpGOkZGRho6SjpKSUEA3N2d/eGliWkg8NCgs
        NTxKWlxpdn+FkZqampqXmpebmpqampubm5uMQDc3QIybmJiampeal5qXmpuXmJeYjEA3N0B7fXRrY1ZK
        PDInKzU+S1pieAAAAAAAAAAAAAAAAAAAAAAAAwYLDhQcIzdzo6OhoaCgo6CjoaOho6Oho3M3N0Bbi393
        eF5WRz0zKC81OUdWXGkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIGTBAQEBAQDdAN0A3Nzc3QDdAQEA3
        cYd8dmxgVEo8MigrND5IVlp4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGTc3Nzc3QDdAN0BAQEA3
        QDc3N4uHfHZqYlVLPTMnLTU8SlRiaQAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAKMEBAQDdEN0A3
        Nzc3QDdERGWSi3p3a2NWRzk2KCw0PktcYngAAAAAAAABAgEBAgAAAAEAAAACAQIAAgAAAAAAAAUwNzc3
        NzdEN0BAN0A3RDeEjYV9eGleWUo+MyktMkFHVlxpAAAAAAACp662wMTEx8fGxMS3qIY9GgEAAAAAAAAA
        D8LCwsbGxcjExY83QDdDm5KHfHpqYFZHOzIpLjY9S1ZaeAAAAAAAAKiws7zEy83MzMzKzczLycu6HQEA
        AAAAAAA7yc/Py8nNycdfQDc3c5iQi3x2YmtWRz00KS00PEdaYmkAAAAAAAKqq7TAx8zU1NHS0NHU0NTR
        1MQhAQIAAAAABMrU1NLU0civQDdEQJaXkYd6eGxeWks8NSgxNDtIVmJ4AAAAAAAAqKu2wcTM0NjZ2dfY
        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
        xsbExcjHvbiup6GakIl/d2piVEc5NSgtOT5FVlxpAAAAAAAAqq6zuru6ur26vba8uru8ur29kwAAAAAB
        Brq7vby8vbu6urq3sKmimJGHfHprY1lIPTQpKzQ+SFZieAAAAAAAAKmutbi3tLezuLW4tLazuK63uDMA
        AAAAAAy4t7S4tra4t7ezs6eqoZuSh3x0amNZSz41KjE2O0pUXGkAAAAAAACosK6urrCusLCwsLa0tKqw
        rqoMAAAAAAAXsKezsLCwsK6wrra0qKOajoZ6eGtiVUc9NCotMz1KVWJ4AAAAAAAAqqqoqqqqqKqop6in
        qqenrq4eAAAAAAIAO6ioq6ioqKunqqiqq6ejm5GHfnhpXllHOzYpLzZBR1xcaQAAAAAAAKCgo6CgoKOg
        oKOjoqCim4AVAAAAAAAAAZeho6Cjo6OhoKGgoaGioJqRhnp0eFxVSz42KTE0O0tVXngAAAAAAACYmpqb
        mpqam5qai31ZKBICAAAAAAAAACuamJibmpuXl5qYmpqimJebkYd+eHhjVko+NSgtNT5HWVVsAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAABABOHkpCRkJKNjo2Rko6Oh42NkI2JfXZsYlpHOzQoKzQ+RVZVeAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAABOCiYaFhoeJgomJi4eCiYaGhouJiX94amJaSz01JzEyOUtU
        XmwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAyB9gHp+fX58eoZ9gH19hoB/fn59fYB9dGtjVkc8NCcs
        NT1IVF5sAAAAAAAAAAAAAAAAAAAAAAACAQAAAAAJGmJ3d3h4d3V3dHp3d3h4dnd4eHd1eHd3eHd4Y1VH
        PTQoLzQ8SlZrawEBAAIAAgABAgIBAAECAAICAQkLFR8zbHRsbGpsbHhrbHhidGxsbGtsbGxqeGlsbGxs
        bF5ZSjw1KCszPEpVYl5eXl5gYl5iYl5VYl5jXmJiYmJeXmtVYmNVXmJeY1ViY15iY2NiXmJiXmJiVWJj
        YmJiYmJiVkg7NCktMj1LWVRUVFRUVlpVWlpUWVpaVlRUWlRaWlRZWVpWWVVaVVZZWllUWVZWWlVaVFRZ
        WllaVFlaWVpZWlpKPTUpLTQ9S0dLS0tIS0hKS0pLSEtHS0tHS0tLS0hLS0dLS0pHSktKSktLS0tHSkdI
        SktLS0tLR0tLS0pLS0tLSz00KCw2PDw9PDw8Pjw+Ozw7PD45PTw5PTw8PDw+PDw9PDw7PTw8PDs5PDw8
        PTs9Pjs8PDw8PD08PDw7PDk8PDw5NQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>